# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_triangle_data_structure.ipynb.

# %% auto 0
__all__ = ['removekey', 'get_neighbors', 'ListOfPts', 'sort_vertices', 'HalfEdge']

# %% ../00_triangle_data_structure.ipynb 4
# helper functions

def removekey(d, key):
    r = dict(d)
    del r[key]
    return r

# %% ../00_triangle_data_structure.ipynb 10
def get_neighbors(faces):
    """compute neighbor list by checking which triangles share 2 vertices. Note: this is quadratic"""
    neighbors = {key: [nghb_key for nghb_key, pot_nghb in faces.items()
                   if len(set(pot_nghb)&set(face)) == 2]
             for key, face in faces.items()}
    return neighbors


class ListOfPts:
    def __init__(self, points, faces, neighbors=None):
        # if we pass lists, automatically assign ids to triangles and vertices
        points = points if type(points) is dict else {ix: x for ix, x in enumerate(points)}
        faces = faces if type(faces) is dict else {ix: x for ix, x in enumerate(faces)}
        self.points, self.faces = (points, faces)
        self.neighbors = get_neighbors(faces) if neighbors is None else neighbors
        
    # some basic methods
    def remove_pt(self, pt_id):
        del self.points[pt_id]
        self.faces = {key: face for key, face in self.faces.items() if not pt_id in face}
        self.neighbors = get_neighbors(self.faces) 

# %% ../00_triangle_data_structure.ipynb 13
def sort_vertices(vertices: np.ndarray) -> np.ndarray:
    """Sort vertices of cycle clockwise by polar angle. Guaranteed to work for non-convex polygons."""
    phis = [np.arctan2(*x) for x in vertices]
    return np.stack([x for _, x in sorted(zip(phis, vertices))])

# %% ../00_triangle_data_structure.ipynb 16
from dataclasses import dataclass

@dataclass
class HalfEdge:
    """Attribute holder class for half edges."""
    nxt: int
    twin: int
    cell: int
    vertices: tuple
